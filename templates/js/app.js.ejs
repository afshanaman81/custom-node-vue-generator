require('dotenv').config()
const express = require('express')
const path = require('path')
<% Object.keys(modules).forEach(function (variable) { -%>
const <%- variable %> = require('<%- modules[variable] %>')
<% }); -%>

<% Object.keys(localModules).sort().forEach(function (variable) { -%>
const <%- variable %> = require('<%- localModules[variable] %>')
<% }); -%>

const app = express()
app.use(express.static(path.join(__dirname, 'dist')));
<% uses.forEach(function (use) { -%>
app.use(<%- use %>)
<% }); -%>

/*Middleware for access control
* this has to come before the routes are defined
* */
app.use(function (req, res, next) {
	// Website you wish to allow to connect
	res.setHeader('Access-Control-Allow-Origin', 'http://localhost:8080');

	// Request methods you wish to allow
	res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');

	// Request headers you wish to allow
	res.setHeader("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept, Authorization")

	// Set to true if you need the website to include cookies in the requests sent
	// to the API (e.g. in case you use sessions)
	res.setHeader('Access-Control-Allow-Credentials', true);

	// Pass to next layer of middleware
	next();
});

// Route Aliases
const auth  = require('./routes/auth')
const api = require('./routes/api')
const admin = require('./routes/admin')

app.use('/', auth)
app.use('/api', api)
app.use('/admin', admin)

<% mounts.forEach(function (mount) { -%>
app.use(<%= mount.path %>, <%- mount.code %>);
<% }); -%>

// Middleware
// catch 404 and forward to error handler
app.use(function(req, res, next) {
	const err = new Error('Not Found');
	err.status = 404;
	next(err);
})

// error handler
app.use(function(err, req, res, next) {
	// set locals, only providing error in development
	res.locals.message = err.message;
	res.locals.error = req.app.get('env') === 'development' ? err : {};

	// render the error page
	res.status(err.status || 500)
	res.json({'error': err})

});
module.exports = app;
